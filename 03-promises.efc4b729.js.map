{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAiCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAa,CAAEF,WAAUC,SAE/B,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQF,GAERG,EAAOH,E,GAERD,E,IA3CMQ,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAIC,iBAMJ,IALA,IAAgCC,EAAAF,EAAIG,cAAcC,SAA1CC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAWC,OAAOJ,EAAMK,OACxBC,EAAUF,OAAOH,EAAKI,OACtBE,EAAYH,OAAOF,EAAOG,OAErBG,EAAI,EAAGA,GAAKD,EAAWC,GAAK,EACnC1B,EAAc0B,EAAGL,GACdM,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBJ,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,MAAK,CAC9D8B,cAAY,EACdC,QAAS,IACTC,kBAAmB,Q,IAGtBC,OAAM,SAAAP,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAA+B,OAAOO,QAAQ,sBAAqCL,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,MAAK,CAC7D8B,cAAc,EACdC,QAAS,IACTC,kBAAmB,Q,IAGzBb,GAAYG,EAEdX,EAAIG,cAAcqB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  const { delay, step, amount } = evt.currentTarget.elements;\n  let delayVal = Number(delay.value);\n  let stepVal = Number(step.value);\n  let amountVal = Number(amount.value);\n\n  for (let i = 1; i <= amountVal; i += 1) {\n    createPromise(i, delayVal)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n          timeout: 6000,\n          cssAnimationStyle: 'zoom',\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n          timeout: 6000,\n          cssAnimationStyle: 'zoom',\n        });\n      });\n    delayVal += stepVal;\n  }\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const promiseObj = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve(promiseObj);\n      } else {\n        reject(promiseObj);\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","promiseObj","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayVal","Number","value","stepVal","amountVal","i","then","param","Notify","success","concat","clickToClose","timeout","cssAnimationStyle","catch","failure","reset"],"version":3,"file":"03-promises.efc4b729.js.map"}